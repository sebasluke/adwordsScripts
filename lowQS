//adapted from brainlabs' script

var EMAIL_ADDRESSES = [""];
var QS_THRESHOLD = 4;
var LABEL_KEYWORDS = true;
var LOW_QS_LABEL_NAME = "";
var PAUSE_KEYWORDS = true; 

function main() {
    Logger.log("Pause keywords: " + PAUSE_KEYWORDS);
    Logger.log("Label Keywords: " + LABEL_KEYWORDS);

    var keywords = findKeywordsWithQsBelow(QS_THRESHOLD);
    Logger.log("Found " + keywords.length + " keywords with low QS");

    if (!labelExists(LOW_QS_LABEL_NAME)) {
        Logger.log(Utilities.formatString('Creating label: "%s"', LOW_QS_LABEL_NAME));
        AdsApp.createLabel(LOW_QS_LABEL_NAME, 'Created By QS Script alert', 'red');
    }

    var mutations = [
        {
            enabled: PAUSE_KEYWORDS,
            callback: function(keyword) {
                keyword.pause();
            }
        }, 
        {
            enabled: LABEL_KEYWORDS, 
            callback: function (keyword, currentLabels) { 
                if (currentLabels.indexOf(LOW_QS_LABEL_NAME) === -1 ) {
                    keyword.applyLabel(LOW_QS_LABEL_NAME);
                }
             }
        }
    ]

    var chunkSize = 10000;
    
    var chunkedKeywords = chunkList(keywords, chunkSize);

    Logger.log('Making changes to kws...');
    chunkedKeywords.forEach(function (keywordChunk) { 
        mutateKeywords(keywordChunk, mutations);
     })

     if (keywords.length > 0) {
         sendEmail(keywords);
         Logger.log("Email sent. ")
     } else {
         Logger.log("Crap dude! No email sent");
     }

}

function findKeywordsWithQsBelow(threshold) {
    var query = 'SELECT Id, AdGroupId, CampaignName, AdGroupName, Criteria, QualityScore, Labels ' +
                'FROM KEYWORDS_PERFORMANCE_REPORT ' +
                'WHERE Status = "ENABLED" AND CampaignStatus = "ENABLED" AND AdGroupStatus = "ENABLED" ' +
                'AND HasQualityScore = "True" AND QualityScore <= ' + threshold;

    var report = AdsApp.report(query);
    var rows = report.rows();

    var lowQSKeywords = [];
    while (rows.hasNext()) {
      var row = rows.next();
        var lowQSKeyword = {
            campaignName: row['CampaignName'],
            adGroupName: row['AdGroupName'],
            keywordText: row['Criteria'],
            labels: (row['Labels'].trim() === '--' ) ? [] : JSON.parse(row['Labels']),
            uniqueId: [row['AdGroupId'], row['Id']],
            qualityScore: row['QualityScore']
        };
        lowQSKeywords.push(lowQSKeyword);
    }
    return lowQSKeywords;
}

function labelExists(labelName) {
    var condition = Utilities.formatString('LabelName = "%s"', labelName);
    return AdsApp.labels().withCondition(condition).get().hasNext();
}

function chunkList(list, chunkSize) {
    var chunks = [];
    for (var i = 0; i < list.length; i += chunkSize) {
        chunks.push(list.slice(i, i + chunkSize));
    }
    return chunks;
}

function mutateKeywords(keywords, mutations) {
    var keywordIds = keywords.map(function(keyword) {
        return keyword['uniqueId'];
    });
    
    var mutationsToApply = getMutationsToApply(mutations);
    var adwordsKeywords = AdsApp.keywords().withIds(keywordIds).get();

    var i = 0;
    while (adwordsKeywords.hasNext()) {
        var currentKeywordLabels = keywords[i]['labels'];
        var adwordsKeyword = adwordsKeywords.next();

        mutationsToApply.forEach( function (mutate) {
            mutate(adwordsKeyword, currentKeywordLabels)
        });
        i++;
    }
}

function getMutationsToApply(mutations) {
    var enabledMutations = mutations.filter(function(mutation) {
        return mutation['enabled'];
    })
    return enabledMutations.map(function(condition) {
        return condition['callback'];
    })

}

function sendEmail(keywords) {
    var subject = "Pausadas palabras con QS Bajo";
   	var htmlBody = 
    "<p>Keywords with QS less than " + QS_THRESHOLD +  " found </p>"
    + '<p>Actions taken: </p>' 
    + '<ul>'
    +    '<li><b>Paused </b>' + PAUSE_KEYWORDS + '</li>' 
    +    '<li><b>Labeled</b> with <code>' + LOW_QS_LABEL_NAME + '</code>:' + LABEL_KEYWORDS + '</li>' 
    + '</ul>' 
        
    + renderTable(keywords);

    MailApp.sendEmail({
        to: EMAIL_ADDRESSES.join(","),
        subject: subject,
        htmlBody: htmlBody
    });
}

function renderTable(keywords) {
    var header = '<table border="2" cellspacing="0" cellpadding="6" rules="groups" frames="hsides">' 
    + '<thead><tr>' 
    +    '<th>Campaign Name</th>' 
    +    '<th>Ad Group Name</th>' 
    +    '<th>Keyword Text</th>'
    +    '<th>Quality Score</th>'        
    + '</tr></thead><tbody>'

    var rows = keywords.reduce(function(accumulator, keyword) {
        return accumulator
        + '<tr><td>' + [
            keyword['campaignName'],
            keyword['adGroupName'],
            keyword['keywordText'],
            keyword['qualityScore'],
            ].join('</td><td>')
        + '</td></tr>';
    }, "");

    var footer = '</tbody></table>';

    var table = header + rows + footer;
    return table;
}
